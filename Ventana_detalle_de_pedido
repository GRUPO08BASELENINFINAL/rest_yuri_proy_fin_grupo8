package GUI;

import java.awt.EventQueue;

import javax.swing.JFrame;
import javax.swing.JPanel;
import javax.swing.border.EmptyBorder;
import javax.swing.table.DefaultTableModel;
import ARREGLOS.ArregloCliente;
import ARREGLOS.ArregloDetallePedido;
import ARREGLOS.ArregloEmpleado;
import ARREGLOS.ArregloHistorialPedido;
import ARREGLOS.ArregloMesa;
import ARREGLOS.ArregloPedido;
import CLASES.Cliente;
import CLASES.Empleado;
import CLASES.Mesa;
import CLASES.Pedido;
import javax.swing.JScrollPane;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.JComboBox;
import javax.swing.JLabel;
import java.awt.Font;
import javax.swing.JTextField;
import javax.swing.JButton;
import java.awt.event.ActionListener;
import java.util.ArrayList;
import java.util.Iterator;
import java.awt.event.ActionEvent;
import javax.swing.DefaultComboBoxModel;
import java.awt.event.MouseListener;
import java.awt.event.MouseEvent;
import java.sql.Timestamp;
import java.time.LocalDateTime;
import java.awt.event.ItemListener;
import java.awt.event.ItemEvent;



public class VRealizarPedido extends JFrame implements ActionListener, MouseListener, ItemListener {

	private static final long serialVersionUID = 1L;
	private JPanel contentPane;
	private JComboBox<String> combocliente;
	private JLabel lblNewLabel;
	private JLabel lblNewLabel_1;
	private JLabel lblNewLabel_2;
	private JTextField txt_idpedido;
	private JLabel lblNewLabel_3;
	private JComboBox<String> comboempleado;
	private JLabel lblNewLabel_4;
	private JComboBox<String> combomesa;
	private JLabel lblNewLabel_5;
	private JTextField txtfecha;
	private JLabel lblNewLabel_6;
	private JLabel lblNewLabel_7;
	private JComboBox<String> combotipo;
	private JLabel lblNewLabel_8;
	private JTextField txttotalpedido;
	private JButton btnagregar;
	private JButton btnEliminar;
	private JButton btnModificar;
	private JButton btnBuscar;
	private ArregloHistorialPedido arreHistorial = new ArregloHistorialPedido();
	private ArregloCliente arreCliente = new ArregloCliente();
	private ArregloEmpleado arreEmpleado = new ArregloEmpleado();
	private ArregloMesa arreMesa = new ArregloMesa();
	private ArregloPedido arrePedido = new ArregloPedido();
	private JComboBox<String> comboestadopedido;
	private JScrollPane scrollPane;
	private JTable table;
	private JButton btnContinuar;
	private JButton btnNewButton;
	private JButton btnNewButton_1;

	/**
	 * Launch the application.
	 */
	public static void main(String[] args) {
		EventQueue.invokeLater(new Runnable() {
			public void run() {
				try {
					VRealizarPedido frame = new VRealizarPedido();
					frame.setVisible(true);
				} catch (Exception e) {
					e.printStackTrace();
				}
			}
		});
	}

	/**
	 * Create the frame.
	 */
	public VRealizarPedido() {
		setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		setBounds(100, 100, 630, 629);
		contentPane = new JPanel();
		contentPane.setBorder(new EmptyBorder(5, 5, 5, 5));

		setContentPane(contentPane);
		contentPane.setLayout(null);
		{
			combocliente = new JComboBox<String>();
			combocliente.setBounds(104, 109, 127, 20);
			contentPane.add(combocliente);
		}
		{
			lblNewLabel = new JLabel("PEDIDO");
			lblNewLabel.setFont(new Font("Times New Roman", Font.PLAIN, 20));
			lblNewLabel.setBounds(263, 11, 80, 41);
			contentPane.add(lblNewLabel);
		}
		{
			lblNewLabel_1 = new JLabel("ID:");
			lblNewLabel_1.setFont(new Font("Times New Roman", Font.PLAIN, 15));
			lblNewLabel_1.setBounds(66, 76, 28, 14);
			contentPane.add(lblNewLabel_1);
		}
		{
			lblNewLabel_2 = new JLabel("Cliente:");
			lblNewLabel_2.setFont(new Font("Times New Roman", Font.PLAIN, 15));
			lblNewLabel_2.setBounds(38, 112, 46, 14);
			contentPane.add(lblNewLabel_2);
		}
		{
			txt_idpedido = new JTextField();
			txt_idpedido.setBounds(104, 74, 86, 20);
			contentPane.add(txt_idpedido);
			txt_idpedido.setColumns(10);
		}
		{
			lblNewLabel_3 = new JLabel("Empleado:");
			lblNewLabel_3.setFont(new Font("Times New Roman", Font.PLAIN, 15));
			lblNewLabel_3.setBounds(20, 149, 67, 14);
			contentPane.add(lblNewLabel_3);
		}
		{
			comboempleado = new JComboBox<String>();
			comboempleado.setBounds(104, 146, 107, 20);
			contentPane.add(comboempleado);
		}
		{
			lblNewLabel_4 = new JLabel("Mesa:");
			lblNewLabel_4.setFont(new Font("Times New Roman", Font.PLAIN, 15));
			lblNewLabel_4.setBounds(326, 149, 46, 14);
			contentPane.add(lblNewLabel_4);
		}
		{
			combomesa = new JComboBox<String>();
			combomesa.setBounds(371, 147, 127, 20);
			contentPane.add(combomesa);
		}
		{
			lblNewLabel_5 = new JLabel("Fecha:");
			lblNewLabel_5.setFont(new Font("Times New Roman", Font.PLAIN, 15));
			lblNewLabel_5.setBounds(45, 185, 39, 14);
			contentPane.add(lblNewLabel_5);
		}
			{
			txtfecha = new JTextField();
			txtfecha.setEditable(false);
			txtfecha.setColumns(10);
			txtfecha.setBounds(104, 183, 143, 20);
			contentPane.add(txtfecha);
		} 
		{
			lblNewLabel_6 = new JLabel("Estado Pedido:");
			lblNewLabel_6.setFont(new Font("Times New Roman", Font.PLAIN, 15));
			lblNewLabel_6.setBounds(277, 76, 97, 14);
			contentPane.add(lblNewLabel_6);
		}
		{
			lblNewLabel_7 = new JLabel("Tipo Pedido:");
			lblNewLabel_7.setFont(new Font("Times New Roman", Font.PLAIN, 15));
			lblNewLabel_7.setBounds(287, 111, 80, 14);
			contentPane.add(lblNewLabel_7);
		}
		{
			combotipo = new JComboBox<String>();
			combotipo.addItemListener(this);
			combotipo.setFont(new Font("Times New Roman", Font.PLAIN, 15));
			combotipo.setModel(new DefaultComboBoxModel<String>(new String[] {"Local", "Delivery"}));
			combotipo.setBounds(371, 108, 86, 22);
			contentPane.add(combotipo);
			combotipo.addActionListener(new ActionListener() {
			    public void actionPerformed(ActionEvent e) {
			        boolean esDelivery = combotipo.getSelectedItem().toString()
			                                      .equalsIgnoreCase("Delivery");
			        combomesa.setEnabled(!esDelivery);
			        if (esDelivery) {
			            combomesa.setSelectedIndex(-1);  
			        }
			    }
			});
		}
		{
			lblNewLabel_8 = new JLabel("Total Pedido:");
			lblNewLabel_8.setFont(new Font("Times New Roman", Font.PLAIN, 15));
			lblNewLabel_8.setBounds(287, 185, 80, 14);
			contentPane.add(lblNewLabel_8);
		}
		{
			txttotalpedido = new JTextField();
			txttotalpedido.setEditable(false);
			txttotalpedido.setBounds(371, 183, 97, 20);
			contentPane.add(txttotalpedido);
			txttotalpedido.setColumns(10);
		}
		{
			btnagregar = new JButton("Agregar");
			btnagregar.addActionListener(this);
			btnagregar.setBounds(38, 235, 89, 23);
			contentPane.add(btnagregar);
		}
		{
			btnEliminar = new JButton("Eliminar");
			btnEliminar.addActionListener(this);
			btnEliminar.setBounds(142, 235, 89, 23);
			contentPane.add(btnEliminar);
		}
		{
			btnModificar = new JButton("Modificar");
			btnModificar.addActionListener(this);
			btnModificar.setBounds(254, 235, 89, 23);
			contentPane.add(btnModificar);
		}
		{
			btnBuscar = new JButton("Buscar");
			btnBuscar.addActionListener(this);
			btnBuscar.setBounds(353, 235, 89, 23);
			contentPane.add(btnBuscar);
		}
		{
			comboestadopedido = new JComboBox<String>();
			comboestadopedido.setFont(new Font("Times New Roman", Font.PLAIN, 15));
			comboestadopedido.setModel(new DefaultComboBoxModel<String>(new String[] {"Pendiente", "Preparando", "Listo Para Entregar", "Listo para Recoger", "En camino", "Entregado", ""}));
			comboestadopedido.setBounds(371, 73, 111, 22);
			contentPane.add(comboestadopedido);
		}
		{
			scrollPane = new JScrollPane();
			scrollPane.setBounds(10, 272, 594, 252);
			contentPane.add(scrollPane);
			{
				table = new JTable();
				table.addMouseListener(this);
				table.setFillsViewportHeight(true);
				scrollPane.setViewportView(table);
			}
		}
		{
			btnContinuar = new JButton("Continuar");
			btnContinuar.addActionListener(this);
			btnContinuar.setBounds(483, 235, 89, 23);
			contentPane.add(btnContinuar);
		}
		{
			btnNewButton = new JButton("VOLVER AL INICIO");
			btnNewButton.addActionListener(this);
			btnNewButton.setBounds(463, 546, 141, 33);
			contentPane.add(btnNewButton);
		}
		{
			btnNewButton_1 = new JButton("VOLVER ATRAS");
			btnNewButton_1.addActionListener(this);
			btnNewButton_1.setBounds(287, 546, 140, 33);
			contentPane.add(btnNewButton_1);
		}
		
		llenarcombocliente();
		llenarcomboempleado();
		llenarcombomesa();
		listar("");
	}
	public void actionPerformed(ActionEvent e) {
		if (e.getSource() == btnContinuar) {
			do_btnContinuar_actionPerformed(e);
		}
		if (e.getSource() == btnNewButton_1) {
			do_btnNewButton_1_actionPerformed(e);
		}
		if (e.getSource() == btnNewButton) {
			do_btnNewButton_actionPerformed(e);
		}
		if (e.getSource() == btnModificar) {
			do_btnModificar_actionPerformed(e);
		}
		if (e.getSource() == btnEliminar) {
			do_btnEliminar_actionPerformed(e);
		}
		if (e.getSource() == btnBuscar) {
			do_btnBuscar_actionPerformed(e);
		}
		if (e.getSource() == btnagregar) {
			do_btnagregar_actionPerformed(e);
		}
	}
	public void llenarcombocliente() {
		ArrayList<Cliente> listacliente = new ArrayList<Cliente>();
		ArregloCliente c = new ArregloCliente();
		listacliente =c.listarClientes();
		Iterator<Cliente> it = listacliente.iterator();
		int i=0;
		while (it.hasNext()) {
			Object obj= it.next();
			Cliente clie = (Cliente)obj;
			combocliente.addItem(clie.getIdPersona() + " - " + clie.getNombre());
			i++;
		}
	}
	public void llenarcomboempleado() {
		ArrayList<Empleado> listaempleado = new ArrayList<Empleado>();
		ArregloEmpleado emp = new ArregloEmpleado();
		listaempleado =emp.listarEmpleados();
		Iterator<Empleado> it = listaempleado.iterator();
		int i=0;
		while (it.hasNext()) {
			Object obj= it.next();
			Empleado emple = (Empleado)obj;
			comboempleado.addItem(emple.getIdPersona() + " - " + emple.getPuesto());
			i++;
		}
	}
	public void llenarcombomesa() {
		ArrayList<Mesa> listamesa = new ArrayList<Mesa>();
		ArregloMesa mesita = new ArregloMesa();
		listamesa = mesita.listarMesas();
		Iterator<Mesa> it = listamesa.iterator();
		int i =0;
		while(it.hasNext()) {
			Object obj = it.next();
			Mesa mesa = (Mesa) obj;
			combomesa.addItem(mesa.getIdMesa() + " - "+ mesa.getEstado());
			i++;
		}
		
	}
	

	
	
	
	int leeridpedido() {
		try {
			String id= txt_idpedido.getText().trim();
			int idpositivo= Integer.parseInt(txt_idpedido.getText()); 
			if(id.isEmpty()) {
				JOptionPane.showMessageDialog(this, "El ID del pedido no puede estar vacío.");
				return -1;
			}else if( idpositivo <0 ) {
				JOptionPane.showMessageDialog(this, "El ID debe ser positivo.");
				return -1;
			}
			return Integer.parseInt(id);
		}catch (NumberFormatException e) {
			JOptionPane.showMessageDialog(this, "El ID del pedido debe ser un número entero válido.");
			return -1;
		}
		
	}
	private int getidselect(JComboBox<String> combito) {
		String itemsito = (String) combito.getSelectedItem();
		if(itemsito == null || !itemsito.contains("-")) return -1;
		try {
			return Integer.parseInt(itemsito.split("-")[0].trim());
		} catch (NumberFormatException ex) {
			return -1;
		}
	}
	
	Timestamp leerFechaHoraActual() {
	    return Timestamp.valueOf(LocalDateTime.now());
	}
	
	
	
	double leertotal() {
		String t = txttotalpedido.getText().trim();
		if (t.isEmpty()) return 0;
		try {
			return Double.parseDouble(t);
		} catch (NumberFormatException e) {
			JOptionPane.showMessageDialog(this, "Total inválido.");
			return -1;
		}
	}
	
	
	protected void do_btnagregar_actionPerformed(ActionEvent e) {
	    int idpedido = leeridpedido();
	    if (idpedido == -1) return;

	    int idcliente = getidselect(combocliente);
	    int idempleado = getidselect(comboempleado);
	    String tipo = combotipo.getSelectedItem().toString();
	    String estado = comboestadopedido.getSelectedItem().toString();
	    double total = leertotal();
	    Mesa mesaObj = null;

	    if (idcliente == -1 || idempleado == -1) {
	        JOptionPane.showMessageDialog(this, "Seleccione cliente y empleado.");
	        return;
	    }

	    if (total == -1) return;

	    if (tipo.equalsIgnoreCase("Local")) {
	        int idmesa = getidselect(combomesa);
	        if (idmesa == -1) {
	            JOptionPane.showMessageDialog(this, "Seleccione una mesa válida.");
	            return;
	        }
	        mesaObj = arreMesa.buscarID(idmesa);
	    }

	    Pedido existente = arrePedido.buscarID(idpedido);
	    if (existente != null) {
	        JOptionPane.showMessageDialog(this, "Ya existe un pedido con ese ID.");
	        return;
	    }
	    boolean esDelivery = tipo.equalsIgnoreCase("Delivery");
	    double totalito = new ArregloDetallePedido()
	                       .calcularTotalPedido(idpedido, esDelivery);
	    txttotalpedido.setText(String.valueOf(totalito));     

	    Pedido nuevo = new Pedido(idpedido,
	                               arreCliente.buscarID(idcliente),
	                               arreEmpleado.buscarID(idempleado),
	                               mesaObj,
	                               leerFechaHoraActual(),
	                               tipo,
	                               estado,
	                               totalito);
	    arrePedido.adicionarPedido(nuevo);
	    String nomcliente = arreCliente.buscarID(idcliente).getNombre();
	    arreHistorial.registrarHistorial(nuevo, nomcliente , totalito);
	    JOptionPane.showMessageDialog(this, "Pedido con el ID " + idpedido + " agregado correctamente.");
	    listar("");
	    limpiarCampos();
	}

	
	private void limpiarCampos() {
		txt_idpedido.setText("");
		txtfecha.setText("");
		combocliente.setSelectedIndex(0);
		comboempleado.setSelectedIndex(0);
		combomesa.setSelectedIndex(0);
		combotipo.setSelectedIndex(0);
	}
	protected void do_btnBuscar_actionPerformed(ActionEvent e) {
		int id = leeridpedido();
		if (id == -1) return;

		Pedido p = arrePedido.buscarID(id);
		if (p != null) {
			
			combocliente.setSelectedItem(buscarComboItem(combocliente, String.valueOf(p.getCliente().getIdPersona())));
			comboempleado.setSelectedItem(buscarComboItem(comboempleado, String.valueOf(p.getEmpleado().getIdPersona())));
			txtfecha.setText(String.valueOf(p.getFechapedido()));
			combotipo.setSelectedItem(p.getTipo_pedido());

			if (p.getTipo_pedido().equalsIgnoreCase("Delivery")) {
			    combomesa.setSelectedIndex(-1);
			    combomesa.setEnabled(false);
			} else {
			    if (p.getMesa() != null) {
			        String mesaItem = buscarComboItem(combomesa, String.valueOf(p.getMesa().getIdMesa()));
			        combomesa.setSelectedItem(mesaItem);
			    } else {
			        combomesa.setSelectedIndex(-1);
			    }
			    combomesa.setEnabled(true);
			}
			comboestadopedido.setSelectedItem(p.getEstadopedido());
			boolean esDelivery = p.getTipo_pedido().equalsIgnoreCase("Delivery");
			double total = new ArregloDetallePedido()
			                   .calcularTotalPedido(p.getIdPedido(), esDelivery);
			txttotalpedido.setText(String.valueOf(total));

			JOptionPane.showMessageDialog(this, "Pedido encontrado.");
		} else {
			JOptionPane.showMessageDialog(this, "No se encontró ningún pedido con ese ID.");
		}

	}
	
	protected void do_btnEliminar_actionPerformed(ActionEvent e) {
		  int id = leeridpedido();
		    if (id == -1) return;
		    Pedido pedido = arrePedido.buscarID(id);
		    if (pedido == null) {
		        JOptionPane.showMessageDialog(this, "No se encontró un pedido con ID: " + id);
		        return;
		    } else {
		    	   int confirm = JOptionPane.showConfirmDialog(this, "¿Seguro que deseas eliminar el pedido con ID: " + id + "?", "Confirmar", JOptionPane.YES_NO_OPTION);
		    	   if(confirm == JOptionPane.YES_OPTION) {
		    		   arrePedido.eliminar(pedido);
		   	        JOptionPane.showMessageDialog(this, "Pedido eliminado correctamente.");
		   	        listar("");
		   	        	limpiarCampos();
		   	        

		    	   }
		    	
		    }

	}
	protected void do_btnModificar_actionPerformed(ActionEvent e) {
		int idPedido = leeridpedido();
		if (idPedido == -1) {
			return; 
		}

		
		Pedido pedidoExistente = arrePedido.buscarID(idPedido);
		if (pedidoExistente == null) {
			JOptionPane.showMessageDialog(this, "No se encontró un pedido con ID: " + idPedido + " para modificar.");
			return;
		}
		
		
		String tipo = combotipo.getSelectedItem().toString();
		String nuevoEstadoPedido = comboestadopedido.getSelectedItem().toString();
		int idcliente = getidselect(combocliente);
		int idempleado = getidselect(comboempleado);
		int idmesa = getidselect(combomesa);
		Timestamp fecha = leerFechaHoraActual();
		double totalPedido = leertotal(); 

	
		if (idcliente == -1 || idempleado == -1 ) {
			JOptionPane.showMessageDialog(this, "Seleccione client y empleado.");
			return;
		}
		if (fecha == null) {
			return; 
		}
		if (totalPedido == -1) { 
			return;
		}
		Pedido pedidoModificado = new Pedido(idPedido, 
											 arreCliente.buscarID(idcliente), 
											 arreEmpleado.buscarID(idempleado), 
											 arreMesa.buscarID(idmesa), 
											 fecha, 
											 tipo, 
											 nuevoEstadoPedido, 
											 totalPedido);
		
		arrePedido.modificarPedido(pedidoModificado);
		arreHistorial.actualizarTotal(pedidoModificado, totalPedido);
		JOptionPane.showMessageDialog(this, "Pedido con ID " + idPedido + " modificado correctamente.");
		listar("");
		limpiarCampos();

	}
	
	
	
	
	public void mouseClicked(MouseEvent e) {
		if (e.getSource() == table) {
			do_table_mouseClicked(e);
		}
	}
	public void mouseEntered(MouseEvent e) {
	}
	public void mouseExited(MouseEvent e) {
	}
	public void mousePressed(MouseEvent e) {
	}
	public void mouseReleased(MouseEvent e) {
	}
	protected void do_table_mouseClicked(MouseEvent e) {
		int fila = table.getSelectedRow();
		txt_idpedido.setText(String.valueOf(table.getValueAt(fila, 0)));
		String idcliente = String.valueOf(table.getValueAt(fila, 1));
		combocliente.setSelectedItem(buscarComboItem(combocliente, idcliente));
		String idempleado = String.valueOf(table.getValueAt(fila, 2));
		comboempleado.setSelectedItem(buscarComboItem(comboempleado, idempleado));
		String idmesa = String.valueOf(table.getValueAt(fila, 3));
		if (idmesa.equalsIgnoreCase("Null")) {
			combomesa.setSelectedIndex(-1); 
			combomesa.setEnabled(false);   
		} else {
			combomesa.setSelectedItem(buscarComboItem(combomesa, idmesa));
			combomesa.setEnabled(true);   
		}                                                                                                                                                                                                                                                                           
		txtfecha.setText(String.valueOf(table.getValueAt(fila, 4)));
		String tipopedido = String.valueOf(table.getValueAt(fila, 5));
		combotipo.setSelectedItem(tipopedido);
		String estadopedido = String.valueOf(table.getValueAt(fila, 6));
		comboestadopedido.setSelectedItem(estadopedido);
		txttotalpedido.setText(String.valueOf(table.getValueAt(fila, 7)));
		
	}
	private String buscarComboItem(JComboBox<String> combo, String idBuscado) {
		for (int i = 0; i < combo.getItemCount(); i++) {
			String item = combo.getItemAt(i);
			if (item.startsWith(idBuscado.trim() + " ")) {
				return item;
			}
		}
		return null;
	}
	
	public void listar(String nom) {
		DefaultTableModel modelo = new DefaultTableModel();

		ArregloPedido m = new ArregloPedido();

		ArrayList<Pedido> lista = new ArrayList<Pedido>();

		lista =m.listarPedido();
		modelo.setRowCount(lista.size());

		Iterator<Pedido> it = lista.iterator();

		modelo.addColumn("ID");

		modelo.addColumn("ID Cliente");

		modelo.addColumn("ID Empleado");
		
		modelo.addColumn("ID Mesa");

		modelo.addColumn("Fecha");
		
		modelo.addColumn("Tipo pedido");
		
		modelo.addColumn("Estado");

		modelo.addColumn("Total pedido");

		int i = 0;

		while(it.hasNext()) {

		Object obj = it.next();

		Pedido emp = (Pedido)obj;

		modelo.setValueAt(emp.getIdPedido(), i, 0);

		modelo.setValueAt(emp.getCliente().getIdPersona(), i, 1);

		modelo.setValueAt(emp.getEmpleado().getIdPersona(), i, 2);
		
		modelo.setValueAt(emp.getMesa() == null ? "Null" : emp.getMesa().getIdMesa(), i, 3);

		modelo.setValueAt(emp.getFechapedido(), i, 4);

		modelo.setValueAt(emp.getTipo_pedido(), i, 5);
		
		modelo.setValueAt(emp.getEstadopedido(), i, 6);
		
		boolean esDeli = emp.getTipo_pedido().equalsIgnoreCase("Delivery");
		double totalCalculito = new ArregloDetallePedido()
		                       .calcularTotalPedido(emp.getIdPedido(), esDeli);

		modelo.setValueAt(totalCalculito, i, 7);   


	



		i++;

		}

		table.setModel(modelo);
	}
	

	@Override
	public void itemStateChanged(ItemEvent e) {
		// TODO Auto-generated method stub
		
	}
	protected void do_btnNewButton_actionPerformed(ActionEvent e) {
		int opcion = JOptionPane.showConfirmDialog(
	            null,
	            "¿Deseas regresar al inicio?",
	            "Confirmar",
	            JOptionPane.YES_NO_OPTION
	        );
	        
	        if (opcion == JOptionPane.YES_OPTION) {
	            VInicio VI = new VInicio();
	            VI.setVisible(true);
	            dispose(); 
	        }
	}
	protected void do_btnNewButton_1_actionPerformed(ActionEvent e) {
		int opcion = JOptionPane.showConfirmDialog(
	            null,
	            "¿Deseas regresar atras?",
	            "Confirmar",
	            JOptionPane.YES_NO_OPTION
	        );
	        
	        if (opcion == JOptionPane.YES_OPTION) {
	            VRegistroCliente VRC = new VRegistroCliente();
	            VRC.setVisible(true);
	            dispose(); 
	        }
	}
	protected void do_btnContinuar_actionPerformed(ActionEvent e) {
		int opcion = JOptionPane.showConfirmDialog(
	            null,
	            "¿Deseas continuar?",
	            "Confirmar",
	            JOptionPane.YES_NO_OPTION
	        );
	        
	        if (opcion == JOptionPane.YES_OPTION) {
	            VRegistrarDetallesPedidos Vrdp = new VRegistrarDetallesPedidos();
	            Vrdp.setVisible(true);
	            dispose(); 
	        }
	}
}
